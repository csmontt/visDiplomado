i = i + 1
}
p <- criba[i]
}
# crear el vector de numeros primos en la criba
j <- 1
primos <- c()
for(i in 1:length(criba)){
if (criba[i] > 1){
primos[j] <-  criba[i]
j = j + 1;
}
}
}
n <- primos(6)
n
primos(6)
v
x <- 1:6
x
n <- 6
nums <- 2:6
primos <- c()
mplo <- c()
nums
n <- 6
nums <- 2:6
primos <- c()
mplo <- c()
for (i in 1:length(nums)){
#primos[i] <- nums[1]
for (j in 1:length(nums)){
#primos[i] <- nums[j]
if(nums[i]*j <= n){
mplo[j] <- nums[i]*j
}
# nums <- nums[!nums %in% mplo]
}
}
mplo
n <- 6
nums <- 2:6
primos <- c()
mplo <- c()
for (i in 1:length(nums)){
#primos[i] <- nums[1]
for (j in 1:length(nums)){
#primos[i] <- nums[j]
if(nums[1]*j <= n){
mplo[j] <- nums[1]*j
}
# nums <- nums[!nums %in% mplo]
}
}
mplo
n <- 6
nums <- 2:6
primos <- c()
mplo <- c()
for (i in 1:length(nums)){
#primos[i] <- nums[1]
for (j in 1:length(nums)){
#primos[i] <- nums[j]
if(nums[2]*j <= n){
mplo[j] <- nums[2]*j
}
# nums <- nums[!nums %in% mplo]
}
}
mplo
n
nums
tail(nums)
tail(nums,1)
nums[lenght(nums)]
nums[length(nums)]
n <- 6
nums <- 2:6
primos <- c()
mplo <- c()
for (i in 1:length(nums)){
#primos[i] <- nums[1]
for (j in 1:length(nums)){
#primos[i] <- nums[j]
if(nums[i]*j <= nums[length(nums)]){
mplo[j] <- nums[i]*j
}
nums <- nums[!nums %in% mplo]
}
}
n <- 6
nums <- 2:6
primos <- c()
mplo <- c()
for (i in 1:length(nums)){
#primos[i] <- nums[1]
for (j in 1:length(nums)){
#primos[i] <- nums[j]
if(nums[i]*j <= nums[length(nums)]){
mplo[j] <- nums[i]*j
}
#nums <- nums[!nums %in% mplo]
}
}
mplo
n <- 6
nums <- 2:6
primos <- c()
mplo <- c()
for (i in 1:length(nums)){
#primos[i] <- nums[1]
for (j in 1:length(nums)){
#primos[i] <- nums[j]
if(nums[1]*j <= nums[length(nums)]){
mplo[j] <- nums[1]*j
}
#nums <- nums[!nums %in% mplo]
}
}
mplo
n <- 6
nums <- 2:6
primos <- c()
mplo <- c()
for (i in 1:length(nums)){
#primos[i] <- nums[1]
for (j in 1:length(nums)){
#primos[i] <- nums[j]
if(nums[2]*j <= nums[length(nums)]){
mplo[j] <- nums[2]*j
}
#nums <- nums[!nums %in% mplo]
}
}
mplo
n <- 6
nums <- 2:6
primos <- c()
mplo <- c()
for (i in 1:length(nums)){
#primos[i] <- nums[1]
for (j in 1:length(nums)){
#primos[i] <- nums[j]
if(nums[3]*j <= nums[length(nums)]){
mplo[j] <- nums[3]*j
}
#nums <- nums[!nums %in% mplo]
}
}
mplo
n <- 6
nums <- 2:6
primos <- c()
mplo <- c()
for (i in 1:length(nums)){
#primos[i] <- nums[1]
for (j in 1:length(nums)){
#primos[i] <- nums[j]
if(nums[3]*j <= n)){
mplo[j] <- nums[3]*j
}
#nums <- nums[!nums %in% mplo]
}
}
n <- 6
nums <- 2:6
primos <- c()
mplo <- c()
for (i in 1:length(nums)){
#primos[i] <- nums[1]
for (j in 1:length(nums)){
#primos[i] <- nums[j]
if(nums[3]*j <= n){
mplo[j] <- nums[3]*j
}
#nums <- nums[!nums %in% mplo]
}
}
n
mplo
x
seq_alon(x)
seq_along(x)
y <- x * seq_along(x)
y
y <- x[1] * seq_along(x)
y
y <- x[2] * seq_along(x)
y
x
x <- 2:6
seq_along(x)
n <- 6
nums <- 2:n
mplo <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
}
mplo
nums
nums[5]
n <- 6
nums <- 2:n
mplo <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
}
mplo
n <- 6
nums <- 2:n
mplo <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
}
print(mplo)
n <- 6
nums <- 2:n
mplo <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
print(mplo)
}
n <- 6
nums <- 2:n
mplo <- c()
i <- 1
while (nums[i] * seq_along(nums) <= n){
mplo <- nums[i] * seq_along(nums)
i <- i + 1
print(mplo)
print(i)
}
n <- 6
nums <- 2:n
mplo <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
print(mplo)
}
n <- 20
nums <- 2:n
mplo <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
print(mplo)
}
n <- 6
nums <- 2:n
mplo <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
print(mplo)
nums <- nums[!nums %in% mplo]
}
n <- 6
nums <- 2:n
mplo <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
print(mplo)
#nums <- nums[!nums %in% mplo]
}
nums
mplo
mplo <- c(2,  4,  6,  8, 10)
nums
mplo
nums[!nums %in% mplo]
}
n <- 6
nums <- 2:n
mplo <- c()
primos <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
primos[i] <- nums[1]
#print(mplo)
print(primos)
#nums <- nums[!nums %in% mplo]
}
n <- 6
nums <- 2:n
mplo <- c()
primos <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
primos[i] <- nums[1]
print(mplo)
#print(primos)
#nums <- nums[!nums %in% mplo]
}
nums[!nums %in% mplo]
nums
mplo
mplo <- c(2,  4,  6,  8, 10)
nums[!nums %in% mplo]
n <- 6
nums <- 2:n
mplo <- c()
primos <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
primos[i] <- nums[1]
print(mplo)
#print(primos)
nums <- nums[!nums %in% mplo]
print(nums)
}
n <- 6
nums <- 2:n
mplo <- c()
primos <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
primos[i] <- nums[1]
#print(mplo)
#print(primos)
nums <- nums[!nums %in% mplo]
print(nums)
}
n <- 6
nums <- 2:n
mplo <- c()
primos <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
primos[i] <- nums[1]
#print(mplo)
print(primos)
nums <- nums[!nums %in% mplo]
#print(nums)
}
n <- 6
nums <- 2:n
mplo <- c()
primos <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
primos[i] <- nums[1]
#print(mplo)
unique(print(primos))
nums <- nums[!nums %in% mplo]
#print(nums)
}
n <- 6
nums <- 2:n
mplo <- c()
primos <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
primos[i] <- nums[1]
#print(mplo)
print(primos)
nums <- nums[!nums %in% mplo]
#print(nums)
}
primos
n <- 6
nums <- 2:n
mplo <- c()
primos <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
primos[i] <- nums[1]
#print(mplo)
print(primos)
nums <- nums[!nums %in% mplo]
#print(nums)
}
unique(primos)
n <- 20
nums <- 2:n
mplo <- c()
primos <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
primos[i] <- nums[1]
#print(mplo)
print(primos)
nums <- nums[!nums %in% mplo]
#print(nums)
}
unique(primos)
n <- 20
nums <- 2:n
mplo <- c()
primos <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
primos[i] <- nums[1]
#print(mplo)
print(primos)
nums <- nums[!nums %in% mplo]
#print(nums)
}
unique(primos)
n <- 20
nums <- 2:n
mplo <- c()
primos <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
primos[i] <- nums[1]
#print(mplo)
#print(primos)
nums <- nums[!nums %in% mplo]
print(nums)
}
unique(primos)
n <- 20
nums <- 2:n
mplo <- c()
primos <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
primos[i] <- nums[1]
#print(mplo)
#print(primos)
nums <- nums[nums %in% mplo]
print(nums)
}
n <- 6
nums <- 2:n
mplo <- c()
primos <- c()
for(i in 1:length(nums)){
mplo <- nums[i] * seq_along(nums)
primos[i] <- nums[1]
#print(mplo)
#print(primos)
nums <- nums[!nums %in% mplo]
print(nums)
}
unique(primos)
sieveOfEratosthenes <- function(num){
values <- rep(TRUE, num)
values[1] <- FALSE
prev.prime <- 2
for(i in prev.prime:sqrt(num)){
values[seq.int(2 * prev.prime, num, prev.prime)] <- FALSE
prev.prime <- prev.prime + min(which(values[(prev.prime + 1) : num]))
}
return(which(values))
}
sieveOfEratosthenes(2000)
sieveOfEratosthenes(20)
sieveOfEratosthenes(6)
?seq.int
primes <- 2:10000000
curr.prime <- 2
while(curr.prime < sqrt(10000000)){
primes[(primes >= curr.prime **2) & (primes %% curr.prime == 0)] <- 0
curr.prime <- min(primes[primes>curr.prime])
}
sieve <- function(n){
## only consider odd numbers greater than 1
## the maximum possible prime is 2n+1
primes <- seq_len(n)*2L+1L
isPrime <- logical(n)
isPrime[] <- TRUE
## we will need this object several times, so compute it once
sqrtn <- sqrt(2L*n + 1L)
## auxiliary indices
sieved <- logical(sqrtn)
i <- 3L
j <- 1L
while(i <= sqrtn){
ind <- i * seq_len((n-j)/i) + j
ind2 <- i * seq_len((sqrtn-j)/i) + j
isPrime[ind] <- FALSE
isPrime[k <- (i-1L)/2L] <- TRUE
sieved[ind2] <- TRUE
sieved[k] <- TRUE
i <- 2L*(j <- which.min(sieved))+1L
}
primes[isPrime]
}
system.time(write.table(sieve(50000000),file=("primes.csv"),row.names=FALSE,col.names=FALSE))
sieve(50000000)
primes <- 2:50000000
curr.prime <- 2
while(curr.prime < sqrt(10000000)){
primes[(primes >= curr.prime **2) & (primes %% curr.prime == 0)] <- 0
curr.prime <- min(primes[primes>curr.prime])
}
primes <- 2:20
curr.prime <- 2
while(curr.prime < sqrt(10000000)){
primes[(primes >= curr.prime **2) & (primes %% curr.prime == 0)] <- 0
curr.prime <- min(primes[primes>curr.prime])
}
primes <- primes[primes!=0]
sieveOfEratosthenes(50000000)
0.01*82000000
0.1*82000000
82000000*0.04
3280000/12
2500000/42000000
40000000*0.06
2400000*2
4800000/12
4800000/12
2400000/12
400000*12
80000000*0.06
q()
setwd("C:/Users/lorel_000/Dropbox/taller shared")
author('ligas')
library(slidify)
author('ligas')
setwd("C:/Users/lorel_000/Dropbox/taller shared")
author('ligasvis')
